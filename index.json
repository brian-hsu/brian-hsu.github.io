[{"categories":["Excel"],"contents":"假設只有一欄文字連結 而想要直接點擊後 使用瀏覽器去導覽 excel 必須 在點選後(點兩下該儲存格) 才會顯示 link 模式 當你有上百筆這樣的情況會很麻煩 (這個情況會是用CSV轉 xls 很常見的) 先看簡單的案例 我們把 欄位 A 和 B 合併 到C 並以 link 模式顯示 在C欄位 加入函式 =HYPERLINK(B1,A1) 完成!! ","permalink":"https://brian-hsu.github.io/blog/my_share-028/","tags":[""],"title":"Excel 合併文字與連結"},{"categories":["Excel"],"contents":"有時候用程式寫出來的 CSV檔 順手點兩下使用 excel 打開 打開後看到亂碼 就秒關了 所以如果想用 excel 做一些手動篩選資料的處理 就必須麻煩一些 第一步 新增 excel 空白檔案 然後打開空白檔案 資料 =\u0026gt; 從文字/CSV 選擇 CSV 檔後 會顯示視窗 在 檔案原點 點開 選擇 65001 然後載入 完成!! ","permalink":"https://brian-hsu.github.io/blog/my_share-027/","tags":[""],"title":"Excel 帶入CSV (unicode)"},{"categories":["Excel"],"contents":"假設有很多資料但是要篩選重複就顯得非常麻煩 Excel 可以幫忙標記並且可以刪除重複 假設我們有一張表 如下 選取全部的欄位 (常用 =\u0026gt; 條件式格式設定 =\u0026gt; 醒目提示儲存格規則 =\u0026gt; 重複的值) 案下確定 會看到紅色標記重複項目 如果要刪除重複 (限 直向欄,橫向列無法使用此方式) 一樣選取全部的欄位 (資料 =\u0026gt; 移除重複項) 這時候如果選擇 欄位三 將會顯示 沒有找到重複值 那我們選擇 欄位一 看看結果 OK 成功 ","permalink":"https://brian-hsu.github.io/blog/my_share-026/","tags":[""],"title":"Excel 重複標記與刪除"},{"categories":["python"],"contents":"以前 ipython 使用起來特別威 沒想到後來 jupyter notebook 出來更是厲害 不過考量我是使用 conda 虛擬環境，特別去建立一個環境給jupyter有點多餘 而且jupyter notebook 是 online 模式的 所以 docker container 特別適合 先來一段掛載 docker container 指令吧~ (我的環境為 Windows) docker run --name jupyter \\ -v C:\\docker_data\\jupyter:/home/jovyan/work \\ -d --restart=always -p 8888:8888 \\ jupyter/datascience-notebook \\ start.sh jupyter notebook --NotebookApp.token=\u0026#39;\u0026#39; 之後只要把 想要執行的資料放 C:\\docker_data\\jupyter 就可以在 http://127.0.0.1:8888/notebooks/work/ 找到囉 如果是在 jupyter notebook 建立新檔案 就建立在 work 資料夾, 依然可以去 C:\\docker_data\\jupyter 找到檔案 jupyter notebook 快捷鍵 命令模式 (按键 Esc 开启) Enter : 转入编辑模式 Shift-Enter : 运行本单元，选中下个单元 Ctrl-Enter : 运行本单元 Alt-Enter : 运行本单元，在其下插入新单元 Y : 单元转入代码状态 M :单元转入markdown状态 R : 单元转入raw状态 1 : 设定 1 级标题 2 : 设定 2 级标题 3 : 设定 3 级标题 4 : 设定 4 级标题 5 : 设定 5 级标题 6 : 设定 6 级标题 Up : 选中上方单元 K : 选中上方单元 Down : 选中下方单元 J : 选中下方单元 Shift-K : 扩大选中上方单元 Shift-J : 扩大选中下方单元 A : 在上方插入新单元 B : 在下方插入新单元 X : 剪切选中的单元 C : 复制选中的单元 Shift-V : 粘贴到上方单元 V : 粘贴到下方单元 Z : 恢复删除的最后一个单元 D,D : 删除选中的单元 Shift-M : 合并选中的单元 Ctrl-S : 文件存盘 S : 文件存盘 L : 转换行号 O : 转换输出 Shift-O : 转换输出滚动 Esc : 关闭页面 Q : 关闭页面 H : 显示快捷键帮助 I,I : 中断Notebook内核 0,0 : 重启Notebook内核 Shift : 忽略 Shift-Space : 向上滚动 Space : 向下滚动 编辑模式 ( Enter 键启动) Tab : 代码补全或缩进 Shift-Tab : 提示 Ctrl-] : 缩进 Ctrl-[ : 解除缩进 Ctrl-A : 全选 Ctrl-Z : 复原 Ctrl-Shift-Z : 再做 Ctrl-Y : 再做 Ctrl-Home : 跳到单元开头 Ctrl-Up : 跳到单元开头 Ctrl-End : 跳到单元末尾 Ctrl-Down : 跳到单元末尾 Ctrl-Left : 跳到左边一个字首 Ctrl-Right : 跳到右边一个字首 Ctrl-Backspace : 删除前面一个字 Ctrl-Delete : 删除后面一个字 Esc : 进入命令模式 Ctrl-M : 进入命令模式 Shift-Enter : 运行本单元，选中下一单元 Ctrl-Enter : 运行本单元 Alt-Enter : 运行本单元，在下面插入一单元 Ctrl-Shift-- : 分割单元 Ctrl-Shift-Subtract : 分割单元 Ctrl-S : 文件存盘 Shift : 忽略 Up : 光标上移或转入上一单元 Down :光标下移或转入下一单元 ","permalink":"https://brian-hsu.github.io/blog/my_share-024/","tags":["jupyter"],"title":"ipython 的 線上版 jupyter notebook"},{"categories":["Python"],"contents":"有時候用秒數計算執行時間 測試資料不夠龐大的情況會使結果變成負值 這時候使用奈秒來看會比較快一些 1秒=1000000000 (ns), 1(ns) =1／1000000000(s)； 來看看 exsample (比較 deque 與 list 的 append 時間花費) from collections import deque import time d = deque(range(10000000)) l = list(range(10000000)) t1 = time.perf_counter_ns() d.append(-1) print(\u0026#39;deque Spend time(ns):\u0026#39;, time.perf_counter_ns() - t1) t2 = time.perf_counter_ns() l.append(-1) print(\u0026#39;list Spend time(ns):\u0026#39;, time.perf_counter_ns() - t2) 執行後顯示 deque Spend time(ns): 4100 list Spend time(ns): 60945300 用奈秒來看 可以清楚知道差距 數值越大 花費時間越久 ","permalink":"https://brian-hsu.github.io/blog/my_share-023/","tags":["perf_counter_ns"],"title":"python 計算 執行時間"},{"categories":["Python"],"contents":"喜歡這款無腦操作的 神logging 並且無須變更就很美的 log 先看看效果 from loguru import logger as logur logur.debug(\u0026#39;this is debug\u0026#39;) logur.info(\u0026#39;this is info\u0026#39;) logur.warning(\u0026#39;this is warning\u0026#39;) logur.error(\u0026#39;this is error\u0026#39;) logur.critical(\u0026#39;this is critical\u0026#39;) 執行後顯示 如果要記錄 log 檔案 from loguru import logger as logur logur.add(\u0026#39;%s_{time}.log\u0026#39; % __file__, level=\u0026#34;ERROR\u0026#34;, diagnose=True, backtrace=True, encoding=\u0026#34;utf8\u0026#34;) logur.debug(\u0026#39;this is debug\u0026#39;) logur.info(\u0026#39;this is info\u0026#39;) logur.warning(\u0026#39;this is warning\u0026#39;) logur.error(\u0026#39;this is error\u0026#39;) logur.critical(\u0026#39;this is critical\u0026#39;) # 官方 意識的 trace def func(a, b): return a / b def nested(c): try: func(5, c) except ZeroDivisionError: logur.exception(\u0026#34;What?!\u0026#34;) 然後呢，打開 log 就會連同 trace 訊息也記錄囉 2021-06-17 01:51:23.468 | ERROR | __main__:loguru:49 - this is error 2021-06-17 01:51:23.469 | CRITICAL | __main__:loguru:50 - this is critical 2021-06-17 01:51:23.469 | ERROR | __main__:nested:42 - What?! Traceback (most recent call last): File \u0026#34;U:/PY/practice/ts_logger.py\u0026#34;, line 57, in \u0026lt;module\u0026gt; nested(0) └ \u0026lt;function nested at 0x0000016589E969D0\u0026gt; \u0026gt; File \u0026#34;U:/PY/practice/ts_logger.py\u0026#34;, line 40, in nested func(5, c) │ └ 0 └ \u0026lt;function func at 0x0000016589E96940\u0026gt; File \u0026#34;U:/PY/practice/ts_logger.py\u0026#34;, line 35, in func return a / b │ └ 0 └ 5 ZeroDivisionError: division by zero 很方便的~ 超級推薦 ","permalink":"https://brian-hsu.github.io/blog/my_share-022/","tags":["loguru"],"title":"取代 python 的 logging"},{"categories":["Python"],"contents":"Never use print for debugging again 真的講得很好~ 新手最土炮的方法就是在問題之前 print 函式 有幸可以不再使用 print 真的是很幸福的事 來看看範例 import pysnooper @pysnooper.snoop() def dict_for2(): dict1 = { \u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2, \u0026#39;c\u0026#39;: 3 } for k, v in dict1.items(): print(\u0026#34;key is : {}\u0026#34;.format(k)) print(\u0026#34;value is : {}\u0026#34;.format(v)) 執行後顯示 Source path:... U:/PY/practice/for_loop.py 23:32:44.931199 call 40 def dict_for2(): 23:32:44.932198 line 42 \u0026#39;a\u0026#39;: 1, 23:32:44.932198 line 43 \u0026#39;b\u0026#39;: 2, 23:32:44.932198 line 44 \u0026#39;c\u0026#39;: 3 23:32:44.932198 line 41 dict1 = { New var:....... dict1 = {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2, \u0026#39;c\u0026#39;: 3} 23:32:44.932198 line 47 for k, v in dict1.items(): New var:....... k = \u0026#39;a\u0026#39; New var:....... v = 1 23:32:44.932198 line 48 print(\u0026#34;key is : {}\u0026#34;.format(k)) 23:32:44.932198 line 49 print(\u0026#34;value is : {}\u0026#34;.format(v)) 23:32:44.932198 line 47 for k, v in dict1.items(): Modified var:.. k = \u0026#39;b\u0026#39; Modified var:.. v = 2 23:32:44.932198 line 48 print(\u0026#34;key is : {}\u0026#34;.format(k)) 23:32:44.932198 line 49 print(\u0026#34;value is : {}\u0026#34;.format(v)) 23:32:44.932198 line 47 for k, v in dict1.items(): Modified var:.. k = \u0026#39;c\u0026#39; Modified var:.. v = 3 23:32:44.932198 line 48 print(\u0026#34;key is : {}\u0026#34;.format(k)) 23:32:44.932198 line 49 print(\u0026#34;value is : {}\u0026#34;.format(v)) 23:32:44.932198 line 47 for k, v in dict1.items(): 23:32:44.932198 return 47 for k, v in dict1.items(): Return value:.. None Elapsed time: 00:00:00.000999 key is : a value is : 1 key is : b value is : 2 key is : c value is : 3 還有給 Elapsed time 其實有點像 shell script 的 -x 方法 真心推薦~ ","permalink":"https://brian-hsu.github.io/blog/my_share-021/","tags":["pysnooper"],"title":"Python debug 神器之一"},{"categories":["Python"],"contents":"遇到 Exception 但不知道哪邊或是 root cause 發現 stackprinter 真的是很棒 來看看範例 import stackprinter a = [10, 4, 3, 9, 22, \u0026#34;0\u0026#34;] try: b = [i for i in a if 100 % i == 0] except Exception as e: print(e) stackprinter.show() 執行後顯示 unsupported operand type(s) for %: \u0026#39;int\u0026#39; and \u0026#39;str\u0026#39; File \u0026#34;U:/PY/practice/exception.py\u0026#34;, line 12, in \u0026lt;module\u0026gt; 8 # with stackprinter.TracePrinter(style=\u0026#39;darkbg2\u0026#39;): 9 # b = [i for i in a if 100 % i == 0] 10 11 try: --\u0026gt; 12 b = [i for i in a if 100 % i == 0] 13 .................................................. a = [10, 4, 3, 9, 22, \u0026#39;0\u0026#39;, ] .................................................. File \u0026#34;U:/PY/practice/exception.py\u0026#34;, line 12, in \u0026lt;listcomp\u0026gt; 8 # with stackprinter.TracePrinter(style=\u0026#39;darkbg2\u0026#39;): 9 # b = [i for i in a if 100 % i == 0] 10 11 try: --\u0026gt; 12 b = [i for i in a if 100 % i == 0] 13 .................................................. i = \u0026#39;0\u0026#39; a = [10, 4, 3, 9, 22, \u0026#39;0\u0026#39;, ] .................................................. TypeError: unsupported operand type(s) for %: \u0026#39;int\u0026#39; and \u0026#39;str\u0026#39; 如果 還沒 try except 更推薦用 with stackprinter.TracePrinter(style=\u0026#39;darkbg2\u0026#39;): something() 結果顯示如下 (雖然有點攏長，但是色彩很棒~) File \u0026#34;U:/PY/practice\\exception.py\u0026#34;, line 9, in \u0026lt;module\u0026gt; 5 6 a = [10, 4, 3, 9, 22, \u0026#34;0\u0026#34;] 7 8 with stackprinter.TracePrinter(style=\u0026#39;darkbg2\u0026#39;): --\u0026gt; 9 b = [i for i in a if 100 % i == 0] 10 .................................................. a = [10, 4, 3, 9, 22, \u0026#39;0\u0026#39;, ] stackprinter.TracePrinter = \u0026lt;class \u0026#39;stackprinter.tracing.TracePrinter\u0026#39;\u0026gt; .................................................. └──┐ File \u0026#34;U:/PY/practice\\exception.py\u0026#34;, line 9, in \u0026lt;listcomp\u0026gt; 5 6 a = [10, 4, 3, 9, 22, \u0026#34;0\u0026#34;] 7 8 with stackprinter.TracePrinter(style=\u0026#39;darkbg2\u0026#39;): --\u0026gt; 9 b = [i for i in a if 100 % i == 0] 10 .................................................. a = [10, 4, 3, 9, 22, \u0026#39;0\u0026#39;, ] stackprinter.TracePrinter = \u0026lt;class \u0026#39;stackprinter.tracing.TracePrinter\u0026#39;\u0026gt; .................................................. File \u0026#34;U:/PY/practice\\exception.py\u0026#34;, line 9, in \u0026lt;listcomp\u0026gt; 5 6 a = [10, 4, 3, 9, 22, \u0026#34;0\u0026#34;] 7 8 with stackprinter.TracePrinter(style=\u0026#39;darkbg2\u0026#39;): --\u0026gt; 9 b = [i for i in a if 100 % i == 0] 10 .................................................. a = [10, 4, 3, 9, 22, \u0026#39;0\u0026#39;, ] stackprinter.TracePrinter = \u0026lt;class \u0026#39;stackprinter.tracing.TracePrinter\u0026#39;\u0026gt; i = \u0026#39;0\u0026#39; .................................................. TypeError: unsupported operand type(s) for %: \u0026#39;int\u0026#39; and \u0026#39;str\u0026#39; File \u0026#34;U:/PY/practice\\exception.py\u0026#34;, line 9, in \u0026lt;module\u0026gt; 5 6 a = [10, 4, 3, 9, 22, \u0026#34;0\u0026#34;] 7 8 with stackprinter.TracePrinter(style=\u0026#39;darkbg2\u0026#39;): --\u0026gt; 9 b = [i for i in a if 100 % i == 0] 10 .................................................. a = [10, 4, 3, 9, 22, \u0026#39;0\u0026#39;, ] stackprinter.TracePrinter = \u0026lt;class \u0026#39;stackprinter.tracing.TracePrinter\u0026#39;\u0026gt; .................................................. File \u0026#34;U:/PY/practice\\exception.py\u0026#34;, line 9, in \u0026lt;listcomp\u0026gt; 5 6 a = [10, 4, 3, 9, 22, \u0026#34;0\u0026#34;] 7 8 with stackprinter.TracePrinter(style=\u0026#39;darkbg2\u0026#39;): --\u0026gt; 9 b = [i for i in a if 100 % i == 0] 10 .................................................. a = [10, 4, 3, 9, 22, \u0026#39;0\u0026#39;, ] stackprinter.TracePrinter = \u0026lt;class \u0026#39;stackprinter.tracing.TracePrinter\u0026#39;\u0026gt; i = \u0026#39;0\u0026#39; .................................................. TypeError: unsupported operand type(s) for %: \u0026#39;int\u0026#39; and \u0026#39;str\u0026#39; ","permalink":"https://brian-hsu.github.io/blog/my_share-020/","tags":["stackprinter"],"title":"Python trace 神器之一"},{"categories":["Python"],"contents":"在不知道這個函式之前,判斷變數為 int 就得自己寫定義 發現了 isinstance 這個函式後, 判斷變數值非常簡單 def it_isinstance(x): if isinstance(x, int): print(\u0026#34;{} is Int\u0026#34;.format(x)) elif isinstance(x, str): print(\u0026#34;{} is Str\u0026#34;.format(x)) elif isinstance(x, list): print(\u0026#34;{} is List\u0026#34;.format(x)) elif isinstance(x, dict): print(\u0026#34;{} is Dict\u0026#34;.format(x)) else: print(\u0026#34;{} is Unknown\u0026#34;.format(x)) it_isinstance(8) it_isinstance(\u0026#34;Hi\u0026#34;) it_isinstance([\u0026#39;l\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;]) it_isinstance({\u0026#39;d\u0026#39;: 1}) it_isinstance((1, 2, 3)) ## 8 is Int ## Hi is Str ## [\u0026#39;l\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;t\u0026#39;] is List ## {\u0026#39;d\u0026#39;: 1} is Dict ## (1, 2, 3) is Unknown ","permalink":"https://brian-hsu.github.io/blog/my_share-019/","tags":["isinstance"],"title":"Python 常用 函式 isinstance"},{"categories":["Docker"],"contents":"docker network 有三種模式 none, 打上 docker network ls 顯示如下: NETWORK ID NAME DRIVER SCOPE 430f7df300e4 bridge bridge local 9eec1e943774 host host local 3c5057c3a127 none null local 打上 docker network inspect none 顯示如下: [\r{\r\u0026quot;Name\u0026quot;: \u0026quot;none\u0026quot;,\r\u0026quot;Id\u0026quot;: \u0026quot;3c5057c3a127f6868eda780bdc7755ad57bd9187efca9452b38f254af676d8c7\u0026quot;,\r\u0026quot;Created\u0026quot;: \u0026quot;2021-06-08T08:03:14.1258993Z\u0026quot;,\r\u0026quot;Scope\u0026quot;: \u0026quot;local\u0026quot;,\r\u0026quot;Driver\u0026quot;: \u0026quot;null\u0026quot;,\r\u0026quot;EnableIPv6\u0026quot;: false,\r\u0026quot;IPAM\u0026quot;: {\r\u0026quot;Driver\u0026quot;: \u0026quot;default\u0026quot;,\r\u0026quot;Options\u0026quot;: null,\r\u0026quot;Config\u0026quot;: []\r},\r\u0026quot;Internal\u0026quot;: false,\r\u0026quot;Attachable\u0026quot;: false,\r\u0026quot;Ingress\u0026quot;: false,\r\u0026quot;ConfigFrom\u0026quot;: {\r\u0026quot;Network\u0026quot;: \u0026quot;\u0026quot;\r},\r\u0026quot;ConfigOnly\u0026quot;: false,\r\u0026quot;Containers\u0026quot;: {\r\u0026quot;26ada483f1efa15667383bed0266cde0f533ef29b6a3a1046f0d325a639bd9c4\u0026quot;: {\r\u0026quot;Name\u0026quot;: \u0026quot;epic_golick\u0026quot;,\r\u0026quot;EndpointID\u0026quot;: \u0026quot;1790ba8d095db67f4ca7d5ca9a215195a102ee4fcee9cb6435144dd8cc7a4059\u0026quot;,\r\u0026quot;MacAddress\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;IPv4Address\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;IPv6Address\u0026quot;: \u0026quot;\u0026quot;\r}\r},\r\u0026quot;Options\u0026quot;: {},\r\u0026quot;Labels\u0026quot;: {}\r}\r]\r建立network driver docker network create --driver bridge my_bridge01 docker network ls 顯示如下: NETWORK ID NAME DRIVER SCOPE 430f7df300e4 bridge bridge local 9eec1e943774 host host local dce4d1ab8734 my_bridge01 bridge local 3c5057c3a127 none null local ","permalink":"https://brian-hsu.github.io/blog/my_share-018/","tags":["Docker Network"],"title":"Docker Network"},{"categories":["Linux"],"contents":"WIKI 介紹如下  Alpine Linux是一個由社群開發的基於musl和BusyBox的Linux作業系統，該作業系統以安全為理念，面向x86路由器、防火牆、虛擬私人網路、IP電話盒及伺服器而設計。\n package management 叫 apk add\t# 添加 package del\t# 刪除 package fix\t# 修復或升級 package update\t# 更新可用 package 的索引 info\t# 印出 有關已安裝或可用 package 的信息 search\t# 搜索 package 或描述 upgrade\t# 升級當前已安裝的軟件 package cache\t# 本地緩存 package 存儲庫的維護操作 version\t# 比較已安裝和可用 package 之間的版本差異 index\t# 從 package 列表中創建存儲庫索引 fetch\t# 下載（但不安裝） package audit\t# 列出原始 package 安裝狀態的文件系統的更改 verify\t# 驗證 package 簽名 dot\t# 為給定 package 創建GraphViz圖表描述 policy\t# 顯示更新給定 package 的存儲庫，加上還提供 package 的存儲庫 stats\t# 顯示統計信息，包括安裝和可用的 package 數，目錄和文件的數量等。 manifest\t# 顯示給定 package 中包含的文件的校驗和 常用的 與 apt 一樣 先更新 apk update 列出 目前已經安裝的 package list: apk info 列出 目前已經安裝的 package list 加上版本與資訊 : apk info -vv 如果 想知道 哪個 binary 是 哪個 package : apk info --who-owns [path] apk info --who-owns /bin/sh\r## /bin/sh is owned by busybox-1.31.1-r20\r查詢 資訊 apk search -v [package name] / # apk search -v 'python3'\rpython3-tkinter-3.8.10-r0 - A graphical user interface for the Python\rpython3-idle-3.8.10-r0 - IDE for Python3 using Tkinter\rpython3-dev-3.8.10-r0 - A high-level scripting language (development files)\rboost-python3-1.72.0-r6 - Boost python3 shared library\rpostgresql-plpython3-contrib-12.7-r0 - PL/Python 3 extension modules distributed with PostgreSQL\rpython3-dbg-3.8.10-r0 - A high-level scripting language (debug symbols)\rpython3-3.8.10-r0 - A high-level scripting language\r安裝 package 並且不要暫存以及相關依賴 : apk --no-cache -i add vim 刪除 package : apk del [package name] 搜尋 python3 pip : apk search -v pip|grep -i python 安裝 pip3 :  apk add -i py3-pip ","permalink":"https://brian-hsu.github.io/blog/my_share-017/","tags":["Alpine"],"title":"Alpine Linux"},{"categories":["Windows"],"contents":"WIKI 介紹如下  適用於Linux的Windows子系統（英語：Windows Subsystem for Linux，簡稱WSL）是一個為在Windows 10和Windows Server 2019上能夠原生執行Linux二進位可執行檔（ELF格式）的相容層。\n 請使用 powershell 執行 wsl CLI 查看哪個版本的WSL被分配給您已安裝的Linux Distors的每個版本： wsl -l -v 決定發行版為預設，請輸入： wsl -s \u0026lt;distro\u0026gt; 因為 docker windows 需要 WSL2, 請先更新到WSL2: WSL2 Linux 核心更新套件(x64) 升级到WSL2並設定為預設: wsl --set-default-version 2 將 安裝的distro 設定為 WSL2 : --set -version \u0026lt;distro\u0026gt; 2 可以在 Windows store 的 我的媒體櫃 查看安裝過哪些 distro 刪除 distro 要去 應用程式與功能 搜尋 並解除安裝 ","permalink":"https://brian-hsu.github.io/blog/my_share-016/","tags":["WSL"],"title":"Windows WSL"},{"categories":["Linux"],"contents":"WIKI 介紹如下  該計劃旨在建成一個完全由自由軟體構造而不含任何專有軟體及專有韌體，使用Linux-libre——一個清除所有非自由代碼（二進位blob）Linux核心的，與Ubuntu一樣友善易用的GNU/Linux作業系統。[3]Trisquel依賴於使用者的捐款。[4]它的標誌是一個藍色三曲枝圖。\n  Trisquel Mini是主線Trisquel的替代版本，用於上網本及古舊機器。它使用低資源需求的LXDE及輕量的GTK+、X Window System，以替代GNOME和Qt/KDE應用程式。\n 因為我主要是用在 VBox，所以尋找比較輕量級的 Linux。並且 Trisquel 是基於 Ubuntu LTS 的衍生版本。 那為何不用 Ubuntu server 呢，其實也是可以，只是 desktop 安裝比較無腦\u0026hellip; ","permalink":"https://brian-hsu.github.io/blog/my_share-015/","tags":["Trisquel"],"title":"Trisquel Mini"},{"categories":["Linux"],"contents":".tar\n打包： tar cvf FileName.tar DirName 解包： tar xvf FileName.tar .gz\n壓縮： gzip FileName 解壓1：gunzip FileName.gz 解壓2：gzip -d FileName.gz  推薦使用 .tar.gz .tar.gz\n壓縮：tar zcvf FileName.tar.gz DirName 解壓：tar zxvf FileName.tar.gz  .bz2\n壓縮： bzip2 -z FileName 解壓1：bzip2 -d FileName.bz2 解壓2：bunzip2 FileName.bz2 .tar.bz2\n壓縮：tar jcvf FileName.tar.bz2 DirName 解壓：tar jxvf FileName.tar.bz2 ","permalink":"https://brian-hsu.github.io/blog/my_share-014/","tags":["tar"],"title":"Linux 常見壓縮與解壓縮指令"},{"categories":["Docker"],"contents":"docker pull portainer/portainer-ce:linux-amd64-2.5.1-alpine 新版image repo 是 portainer-ce docker run -d --restart always --name portainer -p 9000:9000 \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /volume1/homes/docker_data/portainer:/data \\ portainer/portainer-ce:linux-amd64-2.5.1-alpine Docker 宿主主機 IP:9000 第一次使用需要設定 admin 的密碼，連續輸入兩次後就能設定完畢，接著就能看見華麗麗的登入頁面 第一次 admin 登入完畢後，它會問你要管理本地的還是遠端的 Docker, 選擇管理本地（local） 用力按 connect 進去主頁面吧 ","permalink":"https://brian-hsu.github.io/blog/my_share-013/","tags":["Portainer"],"title":"Docker Portainer"},{"categories":["Docker"],"contents":"docker image ls -a : 列出所有 docker image docker image rm [image ID] : 刪除 docker image 列出docker container 全部資訊 docker container ls -a 刪除docker container 資料 docker container rm [CONTAINER ID] -d 進程 --restart always：如果 container 遇到例外的情況被 stop 掉，例如是重新開機，docker 會試著重新啟動此 container\n--name=xxx：設定 container 的 name 為 xxx\n-p: 做 port 的mapping，container裡的port 8080 mapping 到 host 的8080 port\ndocker rmi [IMAGE ID] : 刪除 images 的 image\n如果想一次過將所有 container 停止及刪除, 執行以下指令:\ndocker stop $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n jenkins 首先 建立資料夾 讓 jenkins 資料存放在 local # mkdir ~/docker_jenkins 避免出現權限問題 使用該指令更改 # chown -R 1000:1000 ~/docker_jenkins pull jenkins # docker pull jenkins/jenkins:lts-jdk11 docker run docker run -d --restart=always -v \\ /volume1/homes/docker_data/docker_jenkins/:/var/jenkins_home \\ -p 18080:8080 -p 50000:50000 \\ --name=jenkins jenkins/jenkins:2.289.1-lts-jdk11` -d : deamon --restart=always :重新啟動時 run container -v /volume1/homes/docker_data/docker_jenkins/:/var/jenkins_home :local 資料夾與 container 資料夾作用 -p 18080:8080 : local port 18080 與 container port 8080 作用 --name=jenkins : container name Administrator password 可以 cat ~/docker_jenkins/secrets/initialAdminPassword 貼上後 進入安裝 plugin 點選[Install suggested plugins]。 安裝完畢後 第一次執行會請你建立管理員，這邊直接按[Skip and continue as admin]跳過。 設定jenkins URL，使用預設的http://localhost:8080/即可，點選Save and Finish。 點選Start using Jenkins。 接著就進入Jenkins管理頁面首頁。 使用指令 docker exec -it jenkins bash 進入jenkins container的bash shell介面。 進入 root docker exec -it -u root jenkins /bin/bash # 常用 docker exec -it 進入該 container 執行 環境修改 在People -\u0026gt; admin -\u0026gt; Configure頁面的Password欄位可修改密碼。 ","permalink":"https://brian-hsu.github.io/blog/my_share-012/","tags":["jenkins"],"title":"Docker 指令"},{"categories":["Linux"],"contents":"ubuntu 體系的 docker 安裝為 apt-get install docker.io 安裝好可以查詢 docker 版本 docker --version 啟動 docker 服務 service docker start 拉下第一個 image docker pull hello-world 查看 是否有 image docker images 試著跑 這個 image docker run hello-world 成功會顯示如下 Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026#34;hello-world\u0026#34; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 如果執行 service docker stop 但是不完全停止服務 root@mint-vBox:~# service docker stop Warning: Stopping docker.service, but it can still be activated by: docker.socket 需要使用 systemctl stop docker.socket 終止 docker.socket ","permalink":"https://brian-hsu.github.io/blog/my_share-011/","tags":["docker"],"title":"Ubuntu install docker"},{"categories":["VBox"],"contents":"我們知道VM是虛擬技術之一 所以呢，創建好的機器也是一個獨立的環境 設定好 forwarding，就可以和本機系統互通了，最常用的就是 SSH 應用囉! 進去 forwarding 如下 設定 [主機IP] 就是127.0.0.1 主機的 port 選一個記得住並且沒有被使用 客體IP 就是 VBox 的系統 NAT裡面 DHCP 給的IP 客體Port 就是 VBox 的系統 使用的 port (假設我們要轉發 ssh port 22) ","permalink":"https://brian-hsu.github.io/blog/my_share-009/","tags":["forwarding"],"title":"VBox 設定 轉發 port"},{"categories":["Linux"],"contents":"搜尋文字 /[你要尋找的文字]\\c \\c 是指 忽略大小寫 進入搜尋文字 尋找 下一個匹配 按 n 鍵 (小寫n) 進入搜尋文字 尋找 上一個匹配 按 N 鍵 (大寫N，也可以說是 shift + n ) 會這幾個步驟，搭配 google 設定 Linux，可以節省不少時間喔。 ","permalink":"https://brian-hsu.github.io/blog/my_share-010/","tags":["Vim"],"title":"Vim 內部常用指令介紹"},{"categories":["Linux"],"contents":"# apt-get install ssh # apt-get install openssh-server 設定 ssh config # vim /etc/ssh/sshd_config Port 22 PasswordAuthentication yes PermitRootLogin yes # 是否開放 root 登入 重啟服務 /etc/init.d/ssh restart ","permalink":"https://brian-hsu.github.io/blog/my_share-008/","tags":["SSH"],"title":"設定 Linux (Ubuntu) SSH"},{"categories":["心得與介紹"],"contents":"HTML 文件之標題 \u0026lt;title\u0026gt; 本文內容 \u0026lt;body\u0026gt; 標題字 1 至 6 級 \u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt; 段落 \u0026lt;p\u0026gt; 換行 \u0026lt;br\u0026gt; 橫線 \u0026lt;hr\u0026gt; 註解 \u0026lt;!--...--\u0026gt; 粗體字 \u0026lt;b\u0026gt; 斜體字 \u0026lt;i\u0026gt; 文字刪除線 \u0026lt;s\u0026gt; ","permalink":"https://brian-hsu.github.io/blog/my_share-007/","tags":["HTML"],"title":"基本 HTML 語法 \u003cTAG\u003e"},{"categories":["Python"],"contents":"在 PyCharm 的 File =\u0026gt; Settings\n打開後 在搜尋欄位 打上 wheels\n就可以在 Change font size with Ctrl + Mouse Wheels 打勾\n然後呢~ 就可以用 Ctrl + 滑鼠滾輪 調整字體大小啦! 順便一提 將 code format 快捷鍵 : Ctrl+Alt+L ","permalink":"https://brian-hsu.github.io/blog/my_share-006/","tags":["PyCharm"],"title":"PyCharm 設定"},{"categories":["Python"],"contents":"之前不知道為什麼，在 Mac 系統 PyCharm 沒灌成功。\n一直以為 PyCharm 不能在 Mac 免費使用。\n結果心血來潮，重新抓檔再裝。\n完美! 可以使用~\n最近有看一點 RobotFramework\n來推薦一個 RobotFramework 的 plugin\n它叫做 Robot Framework Language Server\n超棒的!\n","permalink":"https://brian-hsu.github.io/blog/my_share-005/","tags":["PyCharm","RobotFramework"],"title":"RobotFramework with PyCharm"},{"categories":["心得與介紹"],"contents":"在 VScode 按下 F1 打上 \u0026gt;setting json\n加上下列內容\n\u0026#34;workbench.colorCustomizations\u0026#34;: { \u0026#34;editor.selectionBackground\u0026#34;: \u0026#34;#ff510059\u0026#34;, \u0026#34;editor.selectionHighlightBackground\u0026#34;: \u0026#34;#e5ff005f\u0026#34; } selectionBackground 是 選取中的字串 背景顏色\nselectionHighlightBackground 是 其他行 相同字串 背景顏色\n建議 調高透明度!\n","permalink":"https://brian-hsu.github.io/blog/my_share-004/","tags":["VScode"],"title":"VScode 選取中的高亮背景色"},{"categories":["Music"],"contents":"倫·李·奧佐萊克（Karen Lee Orzolek），職業上稱為凱倫·歐（Karen O），是出生於韓國的美國歌手，詞曲作者，音樂家和唱片製作人。她是美國搖滾樂隊Yeah Yeah Yeahs的主唱。\nDon\u0026#39;t you tell another lie Don\u0026#39;t you tell another truth My heart, it isn\u0026#39;t bulletproof From visions of you 你不要再說謊了 你不要再說實話了 我的心，它不是防彈的 從你的願景 Don\u0026#39;t you know the way I feel Can\u0026#39;t you read my mind Don\u0026#39;t you read between the lines For what\u0026#39;s real 你不知道我的感受嗎 你無法讀懂我的心思 不要在字裡行間閱讀 對於什麼是真實的 Forget\u0026#39;em, get\u0026#39;em, get\u0026#39;em I used to rule the streets I was young enough to know that There was something to believe in I\u0026#39;m tired of the lies they tell I\u0026#39;m trying to disguise myself The perfect crime that I\u0026#39;ll commit Is loving you despite all of it 忘了他們，抓住他們，抓住他們 我曾經統治過街道 我還年輕，知道 有一些值得相信的東西 我厭倦了他們說的謊言 我試著掩飾自己 我將犯下的完美罪行 是愛你，儘管這一切 Forget\u0026#39;em, get\u0026#39;em, get\u0026#39;em I used to rule the streets I was young enough to know that There was something to believe in I\u0026#39;m tired of the lies they tell I\u0026#39;m trying to disguise myself The perfect crime that I\u0026#39;ll commit Is loving you despite all of it 忘了他們，抓住他們，抓住他們 我曾經統治過街道 我還年輕，知道 有一些值得相信的東西 我厭倦了他們說的謊言 我試著掩飾自己 我將犯下的完美罪行 是愛你，儘管這一切 You\u0026#39;re my saint, you\u0026#39;re my saint You\u0026#39;re my saint, you\u0026#39;re my sensation You\u0026#39;re my saint, you\u0026#39;re my saint You\u0026#39;re my saint, you\u0026#39;re my sensation 你是我的聖人，你是我的聖人 你是我的聖人，你是我的感覺 你是我的聖人，你是我的聖人 你是我的聖人，你是我的感覺 Set me free To live my life Whatever way I want to be Like smoke in a mirror I disappear Like smoke in a mirror I disappear 有空來看我 過我的生活 無論哪種方式 我想成為 就像鏡子里的煙 我消失了 就像鏡子里的煙 我消失了 Set me free To live my life Whatever way I want to be Like smoke in a mirror I disappear Like smoke in a mirror I disappear 有空來看我 過我的生活 無論哪種方式 我想成為 就像鏡子里的煙 我消失了 就像鏡子里的煙 我消失了 Don\u0026#39;t you know my eyes, my eyes They\u0026#39;ll see you only 難道你不知道我的眼睛，我的眼睛 他們只會看到你 Don\u0026#39;t you know my eyes, my eyes They\u0026#39;ll see you blue 難道你不知道我的眼睛，我的眼睛 他們只會看到你 Blue My one and only 藍色 我唯一的一個    ","permalink":"https://brian-hsu.github.io/blog/my_share-003/","tags":["YT"],"title":"Karen O - YO! MY SAINT"},{"categories":["gohugo"],"contents":"使用 gohugo shortcodes 功能 gohugo shortcodes 介紹網頁\n格式\n{{\u0026lt; youtube [影片後面代碼] \u0026gt;}}\n將 https://www.youtube.com/watch?v=6YwoFeNXFKk 的?v=後面的代碼放入 gohugo shortcodes\nOK! 結果如下   ","permalink":"https://brian-hsu.github.io/blog/my_share-002/","tags":["shortcodes"],"title":"gohugo shortcodes 使用"},{"categories":["心得與介紹"],"contents":"語法: ~(代表 空格符號)\n空格代碼 \u0026ldquo;\u0026amp;nbsp;\u0026rdquo; 雙空格 \u0026ldquo;\u0026amp;ensp;\u0026rdquo; 四空格 \u0026ldquo;\u0026amp;emsp;\u0026rdquo;\n1.內文(初始文字)\n這行是內文\n2.標題\n一級標題 #~內容\n這行是 一級標題 二級標題 ##~內容\n這行是 二級標題 五級標題 #####~內容\n這行是 五級標題 六級標題 ######~內容\n這行是 六級標題 3.粗體 **內容**\n最後面兩個字為 粗體\n4.斜體 *內容*\n最後面兩個字為 斜體 (粗體和斜體無法一起使用)\n5.有序序列 1.~內容\n 有序序列第一行 第二行 \u0026hellip;  6.無序序列 *~內容\n 無序序列第一行 第二行 \u0026hellip;  7.引用 \u0026gt;~內容\n 我是引用的內容\n 8.超連結 [文字](連結網址)\n這是google連結\n回此站首頁\n9.圖片 ![](連結網址)\n圖片網站:\n https://www.flaticon.com/ https://www.dreamstime.com/ https://www.pexels.com/   圖片來自連結\n站內圖片\n10.單行程式碼 `code`\nprint(\u0026quot;Hello Word\u0026quot;) # python code\n11.多行程式碼 Hugo 的多行程式碼中，所支援的所有程式語言 https://pygments.org/languages/#programming-languages\n```(程式語言樣式) more code ``` 有加上程式語言樣式 (py)\ndef is_print(w): print(w) 沒有加上程式語言樣式\ndef is_print(w):\rprint(w)\r12.表格\n| 表头 | 表头 |\r| ---- | ---- |\r| 单元格 | 单元格 |\r| 单元格 | 单元格 |\r   表头 表头     单元格 单元格   单元格 单元格    ","permalink":"https://brian-hsu.github.io/blog/my_share-001/","tags":["Markdown"],"title":"Markdown 相關介紹"}]